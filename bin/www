#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('data-remgika:server');
var http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
// process.env.PORT
var port = normalizePort(process.env.PORT || "8000");
const host = process.env.HOST || "localhost";

app.enable('trust proxy'); // trust all
app.set('trust proxy', true); // same as above
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
   if (error.syscall !== "listen") {
     throw error;
   }
   const address = server.address();
   const bind =
     typeof address === "string" ? "pipe " + address : "port: " + port;
   switch (error.code) {
     case "EACCES":
       console.error(bind + " requires elevated privileges.");
       process.exit(1);
       break;
     case "EADDRINUSE":
       console.error(bind + " is already in use.");
       process.exit(1);
       break;
     default:
       throw error;
   }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    :  addr.port;
  debug(`App running at http://${host}:${bind}`);
}

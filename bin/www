#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('data-remgika:server');
var http = require('http');
const GroupChats = require("../models/chat")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);
console.log(port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
console.log(port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// const io = require('socket.io')(server);
// io.on('connection', (socket) => { 
//   console.log("user connected");
//   // console.log(socket);
//   socket.on('join', async ({name, room, userId}, callback)  =>{
//       socket.join(room)
//       socket.emit("welcome", {user: 'admin', text: `${name}, welcomwe to the room `})
//       socket.broadcast.to(room).emit('welcome', {user : 'admin', text: `${name}, has joind!`})
//   })

//   socket.on("sendMessage", async ({message, room, name, userId})=>{
//       try {
//           const Chats = new GroupChats({
//               userId : userId,
//               groupId:  room,
//               message: message
//           })
//           await Chats.save();
//           io.to(room).emit('message', { name: name, user: userId, text: message})
//       } catch (error) {
//           return error
//       }
//   })

//   socket.on('disconnect', ()=>{
//       console.log('user had left;;;');
//   })
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



